---
import BaseLayout from "../layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
import Card from "../components/Card.astro";
import config from "../config";
---

<BaseLayout title="Contact">
  <section>
    <div class="py-24 sm:py-32">
      <div class="mx-auto max-w-6xl px-6 lg:px-8">
        <div class="mx-auto lg:mx-0">
          <h1
            class="text-5xl font-extrabold tracking-tight text-balance sm:text-7xl"
          >
            Contact
          </h1>
          <p class="mt-2 text-lg/8">Let's keep in touch.</p>
        </div>

        <div class="mt-8 flex justify-center">
          <Card>
            <div class="mb-4 flex items-center justify-between">
              <div class="flex items-center space-x-3">
                <div class="relative">
                  <div id="status-indicator" class="h-3 w-3 rounded-full"></div>
                  <div
                    id="status-pulse"
                    class="absolute inset-0 h-3 w-3 animate-ping rounded-full opacity-75"
                  >
                  </div>
                </div>
                <div>
                  <h3 class="text-sm font-semibold" id="availability-status">
                    Checking availability...
                  </h3>
                  <p
                    class="text-xs text-gray-500 dark:text-gray-400"
                    id="local-time"
                  >
                  </p>
                </div>
              </div>
              <Icon name="tabler:world" class="h-5 w-5 text-gray-400" />
            </div>

            <div class="space-y-1 text-xs text-gray-600 dark:text-gray-300">
              <div class="flex justify-between">
                <span>My timezone:</span>
                <span id="my-timezone" class="font-mono">{config.timezone}</span
                >
              </div>
              <div class="flex justify-between">
                <span>Your timezone:</span>
                <span id="your-timezone" class="font-mono">Detecting...</span>
              </div>
              <div class="flex justify-between">
                <span>Time difference:</span>
                <span id="time-difference" class="font-mono"
                  >Calculating...</span
                >
              </div>
            </div>

            <div
              class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-600"
            >
              <p
                class="text-xs text-gray-500 dark:text-gray-400"
                id="response-expectation"
              >
                Loading response time estimation...
              </p>
            </div>
          </Card>
        </div>

        <div
          class="mt-10 flex max-w-none flex-col flex-nowrap gap-6 sm:flex-row sm:justify-center"
        >
          <div class="flex w-full sm:w-auto">
            <a
              href="mailto:conservant.94.platres@icloud.com"
              target="_blank"
              class="flex w-full items-center justify-center rounded-full bg-black px-8 py-3 text-lg font-medium text-white shadow-xs transition-colors duration-300 hover:bg-gray-700 dark:bg-white dark:text-gray-950 dark:hover:bg-white/90"
              ><Icon name="tabler:mail-filled" class="mr-2 -ml-1.5 h-7 w-7" />
              <span>Send me a message</span></a
            >
          </div>
        </div>

        <div class="mt-8 flex items-center justify-center">
          <Icon
            name="tabler:shield-check"
            class="mr-2 h-4 w-4 flex-shrink-0 text-green-500 sm:h-5 sm:w-5"
          />
          <span class="text-center text-sm">
            This email address is an alias that forwards to my real email.
          </span>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  interface AvailabilityStatus {
    status: "available" | "limited" | "away";
    message: string;
    color: "green" | "yellow" | "orange" | "red";
    responseTime: string;
  }

  function init(): void {
    const myTimezoneElement = document.getElementById("my-timezone");

    if (!myTimezoneElement) {
      return;
    }

    const timezone = myTimezoneElement.textContent.trim() || "UTC";

    function updateAvailability(): void {
      try {
        const now = new Date();

        updateTimeDisplays(timezone);

        const myTime = new Date(
          now.toLocaleString("en-US", { timeZone: timezone }),
        );

        const availability = getAvailabilityStatus(myTime);

        updateAvailabilityUI(availability);
        updateResponseExpectation(availability);
      } catch (error) {
        const statusElement = document.getElementById("availability-status");

        if (!statusElement) {
          return;
        }

        const errorMessage =
          error instanceof Error ? error.message : "Unknown error";
        statusElement.textContent = "Error: " + errorMessage;
      }
    }

    function updateTimeDisplays(myTimezone: string): void {
      const localTimeElement = document.getElementById("local-time");
      const yourTimezoneElement = document.getElementById("your-timezone");
      const timeDifferenceElement = document.getElementById("time-difference");

      const now = new Date();
      const yourTimezone =
        Intl.DateTimeFormat().resolvedOptions().timeZone || "UTC";

      if (!localTimeElement) {
        return;
      }

      const myTime = new Date(
        now.toLocaleString("en-US", { timeZone: myTimezone }),
      );
      const timeString = myTime.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
      });
      localTimeElement.textContent = timeString;

      if (!yourTimezoneElement) {
        return;
      }

      yourTimezoneElement.textContent = yourTimezone;

      if (!timeDifferenceElement) {
        return;
      }

      try {
        const myTimeOffset = new Date(
          now.toLocaleString("en-US", { timeZone: myTimezone }),
        );
        const yourTimeOffset = new Date(
          now.toLocaleString("en-US", { timeZone: yourTimezone }),
        );

        const timeDiff =
          Math.abs(myTimeOffset.getTime() - yourTimeOffset.getTime()) /
          (1000 * 60 * 60);
        const diffHours = Math.round(timeDiff);

        let diffText;
        if (diffHours === 0) {
          diffText = "Same timezone!";
        } else {
          const direction =
            myTimeOffset.getTime() > yourTimeOffset.getTime()
              ? "ahead"
              : "behind";
          diffText = `${diffHours}h ${direction}`;
        }

        timeDifferenceElement.textContent = diffText;
      } catch (error) {
        timeDifferenceElement.textContent = "Unable to calculate";
      }
    }

    function getAvailabilityStatus(time: Date): AvailabilityStatus {
      const hour = time.getHours();
      const day = time.getDay(); // 0 = Sunday, 6 = Saturday

      // Weekend
      if (day === 0 || day === 6) {
        return {
          status: "limited",
          message: "Weekend - Limited availability",
          color: "orange",
          responseTime: "Expect a response within 1-2 days",
        };
      }

      // Working hours (9 AM - 6 PM)
      if (hour >= 9 && hour < 18) {
        return {
          status: "available",
          message: "Available - Working hours",
          color: "green",
          responseTime: "Usually respond within a few hours",
        };
      }

      // Evening (6 PM - 10 PM)
      if (hour >= 18 && hour < 22) {
        return {
          status: "limited",
          message: "Evening - May be available",
          color: "yellow",
          responseTime: "May respond today or tomorrow morning",
        };
      }

      // Night time
      return {
        status: "away",
        message: "Away - Sleeping or personal time",
        color: "red",
        responseTime: "Will respond during next working day",
      };
    }

    function updateAvailabilityUI(availability: AvailabilityStatus): void {
      const statusElement = document.getElementById("availability-status");
      const indicatorElement = document.getElementById("status-indicator");
      const pulseElement = document.getElementById("status-pulse");

      if (!statusElement) {
        return;
      }

      statusElement.textContent = availability.message;

      if (!indicatorElement || !pulseElement) {
        return;
      }

      const colorClasses = [
        "bg-green-500",
        "bg-yellow-500",
        "bg-orange-500",
        "bg-red-500",
      ];
      indicatorElement.classList.remove(...colorClasses);
      pulseElement.classList.remove(...colorClasses);

      let colorClass = "bg-gray-500";
      switch (availability.color) {
        case "green":
          colorClass = "bg-green-500";
          break;
        case "yellow":
          colorClass = "bg-yellow-500";
          break;
        case "orange":
          colorClass = "bg-orange-500";
          break;
        case "red":
          colorClass = "bg-red-500";
          break;
      }

      indicatorElement.classList.add(colorClass);
      pulseElement.classList.add(colorClass);

      if (availability.status === "available") {
        pulseElement.style.display = "block";
      } else {
        pulseElement.style.display = "none";
      }
    }

    function updateResponseExpectation(availability: AvailabilityStatus): void {
      const responseElement = document.getElementById("response-expectation");

      if (!responseElement) {
        return;
      }

      let colorClass = "text-gray-500";
      switch (availability.color) {
        case "green":
          colorClass = "text-green-500";
          break;
        case "yellow":
          colorClass = "text-yellow-500";
          break;
        case "orange":
          colorClass = "text-orange-500";
          break;
        case "red":
          colorClass = "text-red-500";
          break;
      }

      responseElement.innerHTML = `
          <span class="flex items-center justify-center">
            <svg class="w-3 h-3 mr-1 ${colorClass}" fill="currentColor" viewBox="0 0 20 20">
              <circle cx="10" cy="10" r="8"/>
            </svg>
            ${availability.responseTime}
          </span>
        `;
    }

    updateAvailability();

    setInterval(updateAvailability, 60000);
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>

<style>
  #status-pulse {
    animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  @keyframes ping {
    75%,
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  #status-indicator {
    transition: background-color 1s ease;
  }
</style>
