---
import BaseLayout from "../layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
---

<BaseLayout title="Contact">
  <section>
    <div class="py-24 sm:py-32">
      <div class="mx-auto max-w-6xl px-6 lg:px-8">
        <div class="mx-auto lg:mx-0">
          <h1
            class="text-5xl font-extrabold tracking-tight text-balance sm:text-7xl"
          >
            Contact
          </h1>
          <p class="mt-2 text-lg/8">Let's keep in touch.</p>
        </div>

        <div class="mt-8 flex justify-center">
          <div
            id="availability-card"
            class="w-full max-w-md rounded-2xl border border-gray-200/50 bg-white/80 p-6 shadow-lg backdrop-blur-sm dark:border-gray-700/50 dark:bg-gray-800/80"
          >
            <div class="mb-4 flex items-center justify-between">
              <div class="flex items-center space-x-3">
                <div class="relative">
                  <div id="status-indicator" class="h-3 w-3 rounded-full"></div>
                  <div
                    id="status-pulse"
                    class="absolute inset-0 h-3 w-3 animate-ping rounded-full opacity-75"
                  >
                  </div>
                </div>
                <div>
                  <h3 class="text-sm font-semibold" id="availability-status">
                    Checking availability...
                  </h3>
                  <p
                    class="text-xs text-gray-500 dark:text-gray-400"
                    id="local-time"
                  >
                  </p>
                </div>
              </div>
              <Icon name="tabler:world" class="h-5 w-5 text-gray-400" />
            </div>

            <div class="space-y-1 text-xs text-gray-600 dark:text-gray-300">
              <div class="flex justify-between">
                <span>My timezone:</span>
                <span id="my-timezone" class="font-mono">Asia/Shanghai</span>
              </div>
              <div class="flex justify-between">
                <span>Your timezone:</span>
                <span id="your-timezone" class="font-mono">Detecting...</span>
              </div>
              <div class="flex justify-between">
                <span>Time difference:</span>
                <span id="time-difference" class="font-mono"
                  >Calculating...</span
                >
              </div>
            </div>

            <div
              class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-600"
            >
              <p
                class="text-xs text-gray-500 dark:text-gray-400"
                id="response-expectation"
              >
                Loading response time estimation...
              </p>
            </div>
          </div>
        </div>

        <div
          class="mt-10 flex max-w-none flex-col flex-nowrap gap-6 sm:flex-row sm:justify-center"
        >
          <div class="flex w-full sm:w-auto">
            <a
              href="mailto:conservant.94.platres@icloud.com"
              target="_blank"
              class="flex w-full items-center justify-center rounded-full bg-black px-8 py-3 text-lg font-medium text-white shadow-xs transition-colors duration-300 hover:bg-gray-700 dark:bg-white dark:text-gray-950 dark:hover:bg-white/90"
              ><Icon name="tabler:mail-filled" class="mr-2 -ml-1.5 h-7 w-7" />
              <span>Send me a message</span></a
            >
          </div>
        </div>

        <div class="mt-8 space-y-4">
          <p class="text-center text-sm">
            <span
              class="inline-flex flex-wrap items-center justify-center gap-1 sm:gap-2"
            >
              <Icon
                name="tabler:shield-check"
                class="mr-1 h-4 w-4 flex-shrink-0 text-green-500 sm:h-5 sm:w-5"
              />
              <span class="text-center">
                I hide my email address with an alias so robots cannot send me
                junk mails.
              </span>
            </span>
          </p>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  class AvailabilityIndicator {
    myTimezone: string;

    constructor() {
      this.myTimezone = "Asia/Shanghai"; // Change to your timezone
      this.init();
    }

    init(): void {
      this.updateAvailability();
      // Update every minute
      setInterval(() => this.updateAvailability(), 60000);
    }

    updateAvailability(): void {
      const now = new Date();
      const myTime = new Date(
        now.toLocaleString("en-US", { timeZone: this.myTimezone }),
      );
      const yourTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

      // Update time displays
      this.updateTimeDisplays(myTime, yourTimezone);

      // Determine availability
      const availability = this.getAvailabilityStatus(myTime);
      this.updateAvailabilityUI(availability);

      // Update response expectation
      this.updateResponseExpectation(availability, myTime);
    }

    updateTimeDisplays(myTime: Date, yourTimezone: string): void {
      const localTimeElement = document.getElementById("local-time");
      const yourTimezoneElement = document.getElementById("your-timezone");
      const timeDifferenceElement = document.getElementById("time-difference");

      if (localTimeElement) {
        localTimeElement.textContent = myTime.toLocaleTimeString("en-US", {
          hour: "2-digit",
          minute: "2-digit",
          timeZone: this.myTimezone,
        });
      }

      if (yourTimezoneElement) {
        yourTimezoneElement.textContent = yourTimezone || "Unknown";
      }

      if (timeDifferenceElement) {
        const yourTime = new Date();
        const timeDiff =
          Math.abs(myTime.getTime() - yourTime.getTime()) / (1000 * 60 * 60);
        const diffHours = Math.round(timeDiff);

        if (diffHours === 0) {
          timeDifferenceElement.textContent = "Same timezone!";
        } else {
          const direction =
            myTime.getTime() > yourTime.getTime() ? "ahead" : "behind";
          timeDifferenceElement.textContent = `${diffHours}h ${direction}`;
        }
      }
    }

    getAvailabilityStatus(time: Date): {
      status: string;
      message: string;
      color: string;
      responseTime: string;
    } {
      const hour = time.getHours();
      const day = time.getDay(); // 0 = Sunday, 6 = Saturday

      // Weekend
      if (day === 0 || day === 6) {
        return {
          status: "limited",
          message: "Weekend - Limited availability",
          color: "orange",
          responseTime: "Expect a response within 1-2 days",
        };
      }

      // Working hours (9 AM - 6 PM)
      if (hour >= 9 && hour < 18) {
        return {
          status: "available",
          message: "Available - Working hours",
          color: "green",
          responseTime: "Usually respond within a few hours",
        };
      }

      // Evening (6 PM - 10 PM)
      if (hour >= 18 && hour < 22) {
        return {
          status: "limited",
          message: "Evening - May be available",
          color: "yellow",
          responseTime: "May respond today or tomorrow morning",
        };
      }

      // Night time
      return {
        status: "away",
        message: "Away - Sleeping or personal time",
        color: "red",
        responseTime: "Will respond during next working day",
      };
    }

    updateAvailabilityUI(availability: {
      status: string;
      message: string;
      color: string;
      responseTime: string;
    }): void {
      const statusElement = document.getElementById("availability-status");
      const indicatorElement = document.getElementById("status-indicator");
      const pulseElement = document.getElementById("status-pulse");

      if (statusElement) {
        statusElement.textContent = availability.message;
      }

      if (indicatorElement && pulseElement) {
        // Remove existing color classes
        const colorClasses = [
          "bg-green-500",
          "bg-yellow-500",
          "bg-orange-500",
          "bg-red-500",
        ];
        indicatorElement.classList.remove(...colorClasses);
        pulseElement.classList.remove(...colorClasses);

        // Add new color
        const colorClass = `bg-${availability.color}-500`;
        indicatorElement.classList.add(colorClass);
        pulseElement.classList.add(colorClass);

        // Show/hide pulse based on availability
        if (availability.status === "available") {
          pulseElement.style.display = "block";
        } else {
          pulseElement.style.display = "none";
        }
      }
    }

    updateResponseExpectation(
      availability: {
        status: string;
        message: string;
        color: string;
        responseTime: string;
      },
      myTime: Date,
    ): void {
      const responseElement = document.getElementById("response-expectation");
      if (responseElement) {
        const timeString = myTime.toLocaleTimeString("en-US", {
          hour: "2-digit",
          minute: "2-digit",
          timeZone: this.myTimezone,
        });

        responseElement.innerHTML = `
            <span class="flex items-center justify-center">
              <svg class="w-3 h-3 mr-1 text-${availability.color}-500" fill="currentColor" viewBox="0 0 20 20">
                <circle cx="10" cy="10" r="8"/>
              </svg>
              ${availability.responseTime}
            </span>
          `;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new AvailabilityIndicator();
  });

  // Also initialize if script loads after DOM
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new AvailabilityIndicator();
    });
  } else {
    new AvailabilityIndicator();
  }
</script>

<style>
  #status-pulse {
    animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  @keyframes ping {
    75%,
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  /* Smooth transitions for status changes */
  #status-indicator {
    transition: background-color 0.3s ease;
  }

  /* Glassmorphism effect */
  #availability-card {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
</style>
